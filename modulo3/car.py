import sys
import json
import locale
from report import generate
import os
import emails

def load_data(filename):
    """Loads the contents of filename as a JSON file."""
    with open(filename) as json_file:
        data = json.load(json_file)
    return data


def format_car(car):
    """Given a car dictionary, returns a nicely formatted name."""
    return "{} {} ({})".format(
        car["car_make"], car["car_model"], car["car_year"])


def process_data(data):
    """Analyzes the data, looking for maximums.

    Returns a list of lines that summarize the information.
    """
    max_revenue = {"revenue": 0}
    max_sales = {"total_sales": 0}
    sales_by_year = {}

    for item in data:
    # Calculate the revenue generated by this model (price * total_sales)
    # We need to convert the price from "$1234.56" to 1234.56
    # calculate the most popular year with sales
        item_price = locale.atof(item["price"].strip("$"))
        item_revenue = item["total_sales"] * item_price
        item_sales = item["total_sales"]
        if item_revenue > max_revenue["revenue"]:
            item["revenue"] = item_revenue
            max_revenue = item
        if item_sales > max_sales["total_sales"]:
            max_sales = item
        if item["car"]["car_year"] not in sales_by_year.keys():
            sales_by_year[item["car"]["car_year"]] = item["total_sales"]
        else:
            sales_by_year[item["car"]["car_year"]] += item["total_sales"]
        # get max sales year, and year from sales_by_year
        max_year = max(sales_by_year, key=sales_by_year.get)
        max_sales_year = sales_by_year[max_year]

        # TODO: also handle max sales
        # TODO: also handle most popular car_year


    summary = [
    "The {} generated the most revenue: ${}".format(
        format_car(max_revenue["car"]), max_revenue["revenue"]),

    "The {} had the most sales: {}".format(
        format_car(max_sales["car"]), max_sales["total_sales"]),
    
    "The most popular year was {} with {} sales.".format(max_year, max_sales_year)
    ]

    return summary


def cars_dict_to_table(car_data):
    """Turns the data in car_data into a list of lists."""
    table_data = [["ID", "Car", "Price", "Total Sales"]]
    for item in car_data:
        table_data.append([item["id"], format_car(item["car"]), item["price"], item["total_sales"]])
    return table_data


def main(argv):
    """Process the JSON data and generate a full report out of it."""
    data = load_data("car_sales.json")
    summary = process_data(data)
    print(summary)
    # TODO: turn this into a PDF report
    title = 'Sales summary for last month'
    additional_info = '<br />'.join(summary)
    print(additional_info)
    table_data = cars_dict_to_table(data)
    generate("/temp/car_report.pdf", title, additional_info, table_data)
    sender = "automation@example.com"
    receiver = "{}@example.com".format(os.environ.get('USER'))
    subject = "Sales summary for last month"
    body = "The same summary from the PDF, but using \n between the lines"
    message = emails.generate(sender, receiver, subject, body, "/tmp/car_report.pdf")
    emails.send(message)




    # TODO: send the PDF report as an email attachment


if __name__ == "__main__":
    main(sys.argv)
